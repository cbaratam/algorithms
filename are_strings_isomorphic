#include <stdio.h>

#define R 3
#define C 3

int maxlength(int cost[R][C], int m, int n)
{
	int overall_max = 1;
	int max_length[m+1][n+1];
	max_length[0][0] = 1;
	int i,j;
	for(i=0;i<=m;i++)
	{
		for(j=0;j<=n;j++)
		{
			max_length[i][j] = 1;
		}
	}
	for(i=1;i<=n;i++)
	{
		if(cost[0][i] > cost[0][i-1])
		{
			max_length[0][i] = max_length[0][i-1] + 1;
			if(max_length[0][i] > overall_max)
			{
				overall_max = max_length[0][i];
			}
		}
	}
	for(i=1;i<=m;i++)
	{
		if(cost[i][0] > cost[i-1][0])
		{
			max_length[i][0] = max_length[i-1][0] + 1;
			if(max_length[i][0] > overall_max)
			{
				overall_max = max_length[i][0];
			}
		}
	}
	for(i=1;i<=m;i++)
	{
		for(j=1;j<=n;j++)
		{
			int max = 1;
			if(cost[i][j] > cost[i-1][j])
			{
				max = max_length[i-1][j] + 1;
			}
			if(cost[i][j] > cost[i][j-1])
			{
				if(max < max_length[i][j-1] + 1)
				{
					max = max_length[i][j-1] + 1;
				}
			}
			max_length[i][j] = max;
			if(overall_max < max)
			{
				overall_max = max;
			}
		}
	}
	return overall_max;
}
int main()
{
   int cost[R][C] = { {1, 2, 3},
                      {3, 1, 1},
                      {4, 5, 1} };
   printf(" %d ", maxlength(cost, 2, 2));
   return 0;
}
